[{"name":"app.R","content":"library(sf)\r\nlibrary(leaflet)\r\nlibrary(tidyverse)\r\nlibrary(shinydashboard)\r\nlibrary(shinycssloaders)\r\nlibrary(shinyjs)\r\n\r\noptions(shiny.maxRequestSize=100*1024^2) \r\n\r\nui = dashboardPage(skin=\"blue\",\r\n    dashboardHeader(title = \"BEACONs Disturbance Explorer\", titleWidth=320),\r\n    dashboardSidebar(\r\n        sidebarMenu(id=\"tabs\",\r\n            menuItem(\"Mapview\", tabName = \"mapview\", icon = icon(\"th\")),\r\n            fileInput(inputId = \"upload_poly\", label = \"Upload geopackage:\", multiple = FALSE, accept = \".gpkg\")\r\n      )\r\n    ),\r\n  dashboardBody(\r\n    useShinyjs(),\r\n    tags$head(tags$style(\".skin-blue .sidebar a { color: #8a8a8a; }\")),\r\n    tabItems(\r\n      tabItem(tabName=\"mapview\",\r\n            fluidRow(\r\n                tabBox(id = \"one\", width=\"12\",\r\n                    tabPanel(\"Mapview\", leafletOutput(\"map1\", height=750) %>% withSpinner())\r\n                )\r\n            )\r\n        )\r\n    )\r\n  )\r\n)\r\n\r\nserver = function(input, output, session) {\r\n\r\n  lyr_names <- eventReactive(input$upload_poly, {\r\n    file <- input$upload_poly$datapath\r\n    ext <- tools::file_ext(file)\r\n    if(ext == \"gpkg\"){\r\n      st_layers(file)$name\r\n    }\r\n  })\r\n\r\n  output$map1 <- renderLeaflet({\r\n    if (!is.null(input$upload_poly)) {\r\n    m <- leaflet() %>%\r\n      addProviderTiles(\"Esri.WorldImagery\", group=\"Esri.WorldImagery\") %>%\r\n      addProviderTiles(\"Esri.WorldTopoMap\", group=\"Esri.WorldTopoMap\") %>%\r\n      addMeasure(position=\"bottomleft\", primaryLengthUnit=\"meters\", primaryAreaUnit=\"sqmeters\", activeColor=\"#3D535D\", completedColor = \"#7D4479\")\r\n      grps <- NULL\r\n      for(i in lyr_names()) {\r\n        file <- input$upload_poly$datapath\r\n        ext <- tools::file_ext(file)\r\n        x <- st_read(file, i, quiet=T) %>% st_transform(4326)\r\n        if (i=='KDTT') {m <- m %>% addPolygons(data=x, color='black', fill=F, weight=2, group=i)}\r\n        else if (i=='Linear disturbances') {\r\n          pop = ~paste(\"Industry type:\", TYPE_INDUSTRY, \"<br>Disturbance type:\", TYPE_DISTURBANCE)\r\n          m <- m %>% addPolylines(data=x, color='orange', weight=2, group=i, popup=pop)\r\n        }\r\n        else if (i=='Areal disturbances') {\r\n          pop = ~paste(\"Industry type:\", TYPE_INDUSTRY, \"<br>Disturbance type:\", TYPE_DISTURBANCE)\r\n          m <- m %>% addPolygons(data=x, fill=T, stroke=F, fillColor='darkorange', fillOpacity=0.5, group=i, popup=pop)\r\n        }\r\n        else if (i=='Burned areas') {\r\n          pop = ~paste(\"Year of fire:\", Year, \"<br>Area of fire (ha):\", round(Area_ha,1), \"<br>Area in KDTT (ha):\", round(Area_in_kdtt,1))\r\n          m <- m %>% addPolygons(data=x, fill=T, stroke=F, fillColor='red', fillOpacity=0.5, group=i, label=~Year, popup=pop)\r\n        }\r\n        else if (i=='CPCAD 2021') {\r\n          pop = ~paste(\"Name:\", NAME_E, \"<br>Aichi target:\", AICHI_T11, \"<br>IUCN category:\", IUCN_CAT, \"<br>OECM:\", OECM, \"<br>Protected date:\", PROTDATE)\r\n          m <- m %>% addPolygons(data=x, fill=T, stroke=F, fillColor='darkgreen', fillOpacity=0.5, group=i, popup=pop)\r\n        }\r\n        else {m <- m %>% addPolygons(data=x, color='red', fill=T, weight=1, group=i)}\r\n        grps <- c(grps,i)\r\n      }\r\n      m <- m %>% \r\n      addLayersControl(position = \"topright\",\r\n        baseGroups=c(\"Esri.WorldTopoMap\", \"Esri.WorldImagery\"),\r\n        overlayGroups = c(\"Graticule\", grps),\r\n        options = layersControlOptions(collapsed = FALSE)) %>%\r\n      hideGroup(c('fda', grps[-1]))\r\n    m\r\n    }\r\n  })\r\n\r\n}\r\nshinyApp(ui, server)\r\n","type":"text"},{"name":"app_with_table.R","content":"library(shiny)\r\nlibrary(leaflet)\r\nlibrary(sf)\r\nlibrary(dplyr)\r\nlibrary(DT)\r\noptions(shiny.maxRequestSize=100*1024^2) \r\n\r\n# Define UI for application\r\nui <- fluidPage(\r\n   titlePanel(\"Geopackage Viewer\"),\r\n   sidebarLayout(\r\n      sidebarPanel(\r\n         fileInput(\"gpkgFile\", \"Upload geopackage file:\", accept = c(\".gpkg\")),\r\n         selectInput(\"layer\", \"Choose layer:\", choices = NULL),\r\n         textInput(\"bnd\", \"Study area layer:\", value=NULL),\r\n         selectInput(\"fill\", \"Choose color:\", choices=c('orange','red','blue','green'), selected='orange'),\r\n         sliderInput(\"alpha\", label = \"Choose opacity:\", min = 0, max = 1, value = 0.5)\r\n      ),\r\n      mainPanel(\r\n         leafletOutput(\"map\"),\r\n         DTOutput(\"table\")\r\n      )\r\n   )\r\n)\r\n\r\n# Define server logic\r\nserver <- function(input, output, session) {\r\n   observeEvent(input$gpkgFile, {\r\n      file <- input$gpkgFile$datapath\r\n      gpkg <- st_read(file)\r\n      lyrs <- st_layers(file)$name\r\n      updateSelectInput(session, \"layer\", choices = lyrs)\r\n      updateSelectInput(session, \"bnd\", selected = lyrs[1])\r\n   })\r\n\r\n   output$map <- renderLeaflet({\r\n      if (!is.null(input$gpkgFile)) {\r\n        if(!is.null(input$layer)) {\r\n           bnd <- st_read(input$gpkgFile$datapath, layer = input$bnd) %>%\r\n            st_transform(4326)\r\n           lyr <- st_read(input$gpkgFile$datapath, layer = input$layer) %>%\r\n            st_transform(4326)\r\n           m <- leaflet(options = leafletOptions(attributionControl=FALSE)) %>%\r\n              addProviderTiles(\"Esri.WorldImagery\", group=\"Esri.WorldImagery\") %>%\r\n              addProviderTiles(\"Esri.WorldTopoMap\", group=\"Esri.WorldTopoMap\") %>%\r\n              addPolygons(data = bnd, color='black', fill=F, weight=2, group=\"Study area\")\r\n              if (input$layer=='linear_disturbance') {\r\n                m <- m %>% addPolylines(data=lyr, color=input$fill, weight=2, group=input$layer)\r\n              } else {\r\n                m <- m %>% addPolygons(data = lyr, stroke=T, weight=1, color='black', fillColor=input$fill, fillOpacity=input$alpha, group=input$layer)\r\n              }\r\n            m <- m %>% addLayersControl(position = \"topright\",\r\n              baseGroups=c(\"Esri.WorldTopoMap\", \"Esri.WorldImagery\"),\r\n              overlayGroups = c(\"Study area\", input$layer),\r\n              options = layersControlOptions(collapsed = FALSE)) %>%\r\n            hideGroup('')\r\n        }\r\n    }\r\n   })\r\n\r\n   output$table <- renderDT({\r\n      if (!is.null(input$gpkgFile)) {\r\n        layer <- input$layer\r\n        if(!is.null(layer)) {\r\n           data <- st_read(input$gpkgFile$datapath, layer = layer) %>%\r\n              st_drop_geometry()\r\n           datatable(data)\r\n        }\r\n    }\r\n   })\r\n}\r\n\r\n# Run the application\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
